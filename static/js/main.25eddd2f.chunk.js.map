{"version":3,"sources":["Routes.tsx","models/Config.tsx","components/CodeLink.tsx","components/NodeIcon.tsx","components/NodeWeight.tsx","util/DisplayNameHelper.tsx","components/NodeLink.tsx","components/SubcomponentLink.tsx","components/ComponentLink.tsx","components/ComponentSummary.tsx","components/NodeAutosuggest.tsx","components/Home.tsx","models/GraphManager.tsx","components/ModuleSummary.tsx","components/GraphSelector.tsx","components/NodeSummary.tsx","components/ScopeSummary.tsx","components/NodeClosure.tsx","components/SubcomponentSummary.tsx","components/WeightSelector.tsx","components/TreeView.tsx","components/GraphBrowser.tsx","components/Spinner.tsx","components/LoadManifestModal.tsx","components/GraphBrowserLoader.tsx","service/BindingsService.tsx","models/ClassSize.tsx","service/ClassSizeService.tsx","service/GraphSizeService.tsx","service/WeightServiceManager.tsx","components/BrowserHeader.tsx","components/FileDropzone.tsx","App.tsx","index.tsx","util/link.png"],"names":["Paths","Home","Component","Module","GraphModule","GraphScope","GraphNode","GraphClosure","SubComponent","SearchNode","Tree","Routes","component","encodeURIComponent","module","node","scope","key","subcomponent","nodeName","TITLE","data","title","REPO_URL","repo_url","PUBLIC_URL","process","COMPONENTS_MANIFEST_JSON_URL","CodeLink","link","Config","filename","split","pop","rel","target","href","className","getNodeIcon","kind","label","color","NodeIcon","icon","classNames","getWeightColor","weight","value","largeThreshold","smallThreshold","NodeWeight","summary","Number","isInteger","toFixed","unit","DisplayNameHelper","token","shorter_component","i","length","charAt","this","returnProcessedToken","processed_token","token_c","toUpperCase","match","NodeLink","onSelect","undefined","scoped","displayNameHelper","React","useState","copiedFullName","copyHandler","CopiedComponent","useEffect","timer","setTimeout","clearTimeout","onClick","displayNameForKey","replace","Copy","src","LinkImg","height","width","onMouseLeave","SubcomponentLink","subcomponentName","index","lastIndexOf","substring","getDisplayName","ComponentLink","componentName","to","ComponentSummary","graphManager","weightService","graph","getComponent","history","useHistory","scopedBindings","nodes","filter","binding","componentSet","Set","forEach","add","membersInjectors","componentProvisions","dependencies","multiBindings","sort","nodeA","nodeB","weightA","getWeight","weightB","map","size","Array","from","getSubcomponentWeight","push","NodeAutosuggest","query","setQuery","searchRef","useRef","suggestions","useMemo","getMatches","trim","toLowerCase","getSuggestions","autoFocusInput","event","metaKey","current","input","focus","window","addEventListener","removeEventListener","ref","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","_","suggestion","getSuggestionValue","renderSuggestion","inputProps","placeholder","onChange","params","newValue","weightServiceManager","components","getWeightService","name","GraphManager","manifestUrl","classInfoUrl","classInfo","nodeMap","componentMap","provisionsToExposingComponentsMap","subcomponentWeights","callsitesMap","a","axios","get","classInfoResponse","manifestResponse","populateCaches","manifestFile","readFileAsync","JSON","parse","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","max","strictMatch","matches","includes","moduleName","Object","values","bindings","reference","getNode","referenceNode","find","d","graphReducer","computeWeightForNodes","queue","visited","queueNode","shift","reduce","dependency","shouldSkipWeight","dependencyKey","bindingInComponent","shouldSkipNode","arr","dep","ModuleSummary","graphModule","getModule","displayName","pos","GraphSelector","graphs","selectGraph","graphOptions","toString","defaultValue","classNamePrefix","options","NodeSearch","searchResult","tokenList","resultComponents","setOfComponents","every","has","searchHandler","NodeSummary","fullDetails","displayFullSummary","uniqueName","bindingModule","availableGraphs","it","callsites","getCallsites","bindingKind","readableKind","componentSimpleName","simpleScope","createdComponentKey","adjacentNodes","nodeKey","componentNode","createdComponent","providingComponents","getDependencyProviders","t","getProvidingComponents","ScopeSummary","graphScope","getScope","NodeClosure","moduleBindings","moduleSummary","bindingKey","modules","getDependencies","scopedDependencies","keys","idx","getScopeDisplayName","parts","slice","join","getModuleDisplayName","SubcomponentSummary","totalBinds","getSubcomponentBindings","WeightSelector","props","metricOptions","getWeightServiceNames","state","selectedOption","option","setState","onSelectWeight","TreeView","mapOfNodes","Map","listOfDependencies","depedency","set","mapOfComponents","substr","opened","far","tag","MDBFileSystemComponentNew","rootNode","dependenciesIconMap","isInstance","style","fal","GraphBrowser","includeWeightSelector","selectWeightService","path","render","decodeURIComponent","GraphSpinner","spinnerColor","spinnerWidth","visible","radius","stroke","LoadManifestModal","trigger","onChangeManifestUrl","inputRef","actions","flat","modal","waves","bottomSheet","fixedFooter","header","id","dismissible","endingTop","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","opacity","outDuration","preventScrolling","startingTop","type","onKeyDown","ev","keyCode","GraphBrowserLoader","loaded","Spinner","BindingsService","nodeWeights","computeNodeWeight","GraphReducerImpl","ClassSize","codeSize","code_size","Math","round","method_count","lambda_count","field_count","inner_class_count","classSize","count","ClassSizeService","getClassSize","memorySizeKb","getMemorySize","getSummary","info","GraphSizeService","classSizeService","assign","initialKey","reduced","parentClassSize","childClassSize","WeightServiceManager","weightServices","BrowserHeader","alignment","autoTrigger","closeOnClick","constrainWidth","container","coverTrigger","hover","right","FileDropzone","onFilesSelected","children","onDrop","useCallback","useDropzone","getRootProps","isDragActive","getInputProps","App","loadedManifest","refresh","loadFile","success","loadUrl","url","acceptedFiles","alert","ReactRouterRoute","Route","files","onChangeManifestFile","ReactDOM","document","getElementById","exports"],"mappings":"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","file":"static/js/main.25eddd2f.chunk.js","sourcesContent":["/**\n * Provides all of the route helpers\n */\nexport class Paths {\n  static Home = \"/:component?\"\n  static Component = \"/:component\"\n  static Module = \"/module/:module\"\n  static GraphModule = \"/:component/module/:module\"\n  static GraphScope = \"/:component/scope/:scope\"\n  static GraphNode = \"/:component/node/:node\"\n  static GraphClosure = \"/:component/closure/:key\"\n  static SubComponent = \"/:component/:subcomponent\"\n  static SearchNode = \"/search/:nodeName\"\n  static Tree = \"/:component/tree/:key\"\n}\n\nexport class Routes {\n  static Home = \"/\"\n  static Component = (component: string): string => {\n    return `/${encodeURIComponent(component)}`;\n  }\n  static Module = (module: string): string => {\n    return `/module/${encodeURIComponent(module)}`;\n  }\n  static GraphNode = (component: string, node: string): string => {\n    return `/${encodeURIComponent(component)}/node/${encodeURIComponent(node)}`;\n  }\n  static GraphModule = (component: string, module: string): string => {\n    return `/${encodeURIComponent(component)}/module/${encodeURIComponent(module)}`;\n  }\n  static GraphScope = (component: string, scope: string): string => {\n    return `/${encodeURIComponent(component)}/scope/${encodeURIComponent(scope)}`;\n  }\n  static GraphClosure = (component: string, key: string): string => {\n    return `/${encodeURIComponent(component)}/closure/${encodeURIComponent(key)}`;\n  }\n\n  static SubComponent = (component: string, subcomponent: string): string => {\n    return `/${encodeURIComponent(component)}/${encodeURIComponent(subcomponent)}`;\n  }\n  static SearchNode = (nodeName: string): string => {\n    return `/search/${encodeURIComponent(nodeName)}`;\n  }\n  static Tree = (component: string, key: string): string => {\n    return `/${encodeURIComponent(component)}/tree/${encodeURIComponent(key)}`;\n  }\n}\n\nexport default Routes;","/**\n * Configuration class based on input Config.json\n */\n\nimport data from \"src/Config.json\";\n\ninterface Config {\n  // Title of the page\n  TITLE: string;\n  // Url to the code in github repo\n  REPO_URL?: string;\n  // Public Url\n  PUBLIC_URL: string;\n  // Components manifest url\n  COMPONENTS_MANIFEST_JSON_URL: string;\n}\n\nexport default {\n  TITLE: data.title || \"Graph Browser\",\n  REPO_URL: data.repo_url || \"\",\n  PUBLIC_URL: process.env.PUBLIC_URL || \"\",\n  COMPONENTS_MANIFEST_JSON_URL: (process.env.PUBLIC_URL || \"\") + '/ComponentsManifest.json'\n} as Config;","import React from \"react\";\nimport Config from \"../models/Config\";\n\ninterface Props {\n  link: string;\n}\n\nconst CodeLink = ({ link }: Props) => {\n  if (Config.REPO_URL) {\n    let filename = link.split(\".\").pop();\n    return (\n      <a\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n        href={Config.REPO_URL + \"/search?q=filename:\" + filename}\n        className=\"unselectable\"\n      >\n        <i className=\"tiny material-icons\">open_in_new</i>\n      </a>\n    );\n  } else {\n    return <span></span>;\n  }\n};\n\nexport default CodeLink;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\ninterface Props {\n  kind: string | null | undefined;\n}\n\nconst NodeIcon = ({ kind }: Props) => {\n  let icon = getNodeIcon(kind);\n  if (!icon) {\n    return <span />;\n  }\n\n  return (\n    <span className={classNames(\"node-icon\", icon.color)} title={kind || \"\"}>\n      {icon.label}\n    </span>\n  );\n};\n\n// TODO: Make this configurable\nlet getNodeIcon = (\n  kind: string | null | undefined\n): { label: string; color: string } | undefined => {\n  switch (kind) {\n    case \"INSTANCE\": {\n      return { label: \"I\", color: \"deep-purple\" };\n    }\n    case \"PROVIDER\": {\n      return { label: \"P\", color: \"blue\" };\n    }\n    case \"LAZY\": {\n      return { label: \"L\", color: \"indigo\" };\n    }\n    default: {\n      return undefined;\n    }\n  }\n};\n\nexport default NodeIcon;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Weight } from \"../models/Graph\";\n\ntype Props = {\n  weight: Weight | null | undefined;\n};\n\nconst NodeWeight = ({ weight }: Props) => {\n  if (!weight) {\n    return <span />;\n  }\n\n  return (\n    <span>\n      {weight && weight.value > 0 &&\n        <span\n          className={classNames(\"unselectable\", \"bubble\", getWeightColor(weight))}\n          title={weight.summary}\n        >\n          {Number.isInteger(weight.value) ? weight.value : weight.value.toFixed(1)} {weight.unit ? weight.unit : ''}\n        </span>\n      }\n    </span>\n  );\n};\n\nconst getWeightColor = (weight: Weight): string => {\n  if (weight.value > weight.largeThreshold) {\n    return \"red\";\n  } else if (weight.value > weight.smallThreshold) {\n    return \"orange\";\n  } else {\n    return \"green\";\n  }\n};\n\nexport default NodeWeight;\n","export class DisplayNameHelper {\n    //constructor is empty, only necessary to access methods parseString, and addQuestionsMarks\n    constructor() {}\n\n    /* \n    Component is passed in and a shorter name of the component is returned\n    The component is broken into tokens and then processed and returns the processed\n    token to then be appended into the result\n    */\n    displayNameForKey(component: string){\n        var token: string = \"\"\n        var shorter_component: string = \"\"\n        for (var i =0; i < component.length; i++) {\n            //when a space is detected, a token will be passed , then append the formated token to the \"shorter_component\" var\n            if (component.charAt(i) == ' ') {\n                // will not append empty tokens eg \"extends\"\n                if(this.returnProcessedToken(token) == \"\"){\n                    token = \"\"\n                    continue\n                }\n                shorter_component += this.returnProcessedToken(token) + \" \"\n                token = \"\"\n                // will skip adding the whitespace to the next token\n                continue\n            }\n            token += component.charAt(i)\n        }\n        // used to append the last token or only token in the loop\n        shorter_component += this.returnProcessedToken(token)\n        return shorter_component\n    }\n\n    /*\n        token is processed and returns a formatted token\n    */\n    returnProcessedToken(token: string) {\n        var processed_token: string = \"\"\n        for(var i =0; i < token.length; i++){\n            let token_c = token.charAt(i)\n            if (token_c == '#') {\n                break;\n            }\n            //append special characters for formating purposes\n            if(token_c == '@' || token_c == '>' || token_c == ',' || token_c == '<' || token_c == '?'){\n                processed_token += token_c\n                // both conditions make sure checking for the next character is not out of range, then checks if a space is necessary after a closing angle bracket or a comma\n\n                /*\n                    eg: com.snap.durablejob.DurableJob<?>>,javax.inject.Provider<com.snap.durablejob.DurableJobProcessor<?,?>>> \n                    this token should return: DurableJob<?>>, Provider<DurableJobProcessor<?,?>>>\n                                                            ^^\n                                                            these two should be split, so an extra space is appended to the processed_token string\n\n                */\n                if (i < token.length-1 && token_c == '>' && token.charAt(i+1) != '>' && token.charAt(i+1) != ',' && token.charAt(i+1) != ' ') {\n                    processed_token += \" \"\n                } else if (i < token.length-1 && token_c == ',' && token.charAt(i+1) != '?') {\n                    processed_token += \" \"\n                }\n            }\n            //checks if a class name is being used, then iterates through the token and makes sure the next characters are alphabetical characters or dots (.)\n            else if (token_c === token_c.toUpperCase() && token_c.match(/[A-Z]/i)) {\n                processed_token += token_c\n                i++\n                while (i < token.length && token.charAt(i) != ' ' && token.charAt(i).match(/[a-zA-Z0-9.()\"_ -]/i)) {\n                    processed_token+= token.charAt(i)\n                    i++\n                }\n                //decrement back to the original position or position where the condition above was false\n                i--\n            }\n        }\n        return processed_token\n    }\n}\nexport default DisplayNameHelper","import React, { useEffect } from \"react\";\nimport { Node, Weight } from \"../models/Graph\";\nimport CodeLink from \"./CodeLink\";\nimport NodeIcon from \"./NodeIcon\";\nimport NodeWeight from \"./NodeWeight\";\nimport DisplayNameHelper from \"../util/DisplayNameHelper\";\nimport \"./NodeToolTip.css\";\nimport LinkImg from \"../util/link.png\"\nimport Copy from \"clipboard-copy\"\n\ntype Props = {\n  node: Node;\n  weight?: Weight;\n  onSelect?: (node: string) => void;\n  scoped?: boolean;\n  kind?: string;\n};\n\nfunction getDisplayName(key: string): string {\n  return key\n    .replace(\"java.util.\", \"\")\n    .replace(\"java.lang.\", \"\")\n    .replace(\"javax.inject.\", \"\")\n    .replace(\"io.reactivex.\", \"\")    \n}\n\nconst NodeLink: React.FC<Props> = ({\n  node,\n  onSelect,\n  weight = undefined,\n  scoped = false,\n  kind\n}: Props) => {\n  const scope = node.scope ? `[${node.scope.split(\".\").pop()}]` : \"\";\n  const displayNameHelper = new DisplayNameHelper()\n  const [copiedFullName , copyHandler ]  = React.useState(false)\n  const CopiedComponent = ()  => {\n    useEffect(() => {\n      // component will hide after 5 seconds\n      const timer = setTimeout(() => copyHandler(false), 5000);\n      return () => clearTimeout(timer);\n    }, []);\n    return (\n      <div className = \"copiedTextLink\">\n        <span>Copied Component!</span>\n        <br/>\n      </div>\n    );\n  }\n  return (<div className=\"tooltip_link\">\n    <div className=\"binding\">\n      <div>\n        <NodeIcon kind={kind || node.kind} />\n        {scoped && <span className=\"light-text\">{scope}&nbsp;</span>}\n        <span onClick={() => onSelect && onSelect(node.key)} >{displayNameHelper.displayNameForKey(getDisplayName(node.key))}</span>\n              <span className=\"tooltiptext_link\" onClick={() => Copy(node.key)}>\n                <img src = {LinkImg} height = {12} width = {12} onMouseLeave = {() => copyHandler(false)} \n                onClick = {() => {copyHandler(true)\n                }}/> \n                {copiedFullName && <CopiedComponent/>}\n                &nbsp; {node.key}\n              </span>\n      </div>\n      <div>\n        <CodeLink link={node.key} />\n        <NodeWeight weight={weight} />\n      </div>\n    </div>\n  </div>);\n\n};\n\nexport default NodeLink;\n","import React from \"react\";\nimport { Weight } from \"../models/Graph\";\nimport NodeWeight from \"./NodeWeight\";\n\ntype Props = {\n    subcomponentName: string;\n    weight: Weight;\n    onSelect?: (node: string) => void;\n};\n\n\nfunction getDisplayName(key: string): string {\n    let index = key.lastIndexOf(\".\");\n    return key.substring(index + 1)\n  }\n\nconst SubcomponentLink: React.FC<Props> = ({\n  subcomponentName,\n  weight,\n  onSelect\n}: Props) => {\n  return (<div>\n    <div className=\"binding\" onClick={() => onSelect && onSelect(subcomponentName)}>\n      <div className=\"text\">\n        {getDisplayName(subcomponentName)}\n      </div>\n      <div>\n        <NodeWeight weight={weight} />\n      </div>\n    </div>\n  </div>);\n\n};\n\nexport default SubcomponentLink;\n","import React from \"react\";\nimport { Node, Weight } from \"../models/Graph\";\nimport CodeLink from \"./CodeLink\";\nimport Routes from \"src/Routes\";\nimport NodeWeight from \"./NodeWeight\";\nimport { Link } from \"react-router-dom\";\n\ntype Props = {\n  componentName: string;\n  weight?: Weight;\n};\n\nconst ComponentLink: React.FC<Props> = ({\n  componentName,\n  weight = undefined\n}: Props) => {\n  return (<div>\n    <div className=\"binding\">\n      <div className=\"text\">\n        <Link to={Routes.Component(componentName)}>\n        {componentName}\n        </Link>\n      </div>\n      <div>\n        <CodeLink link={componentName} />\n        <NodeWeight weight={weight} />\n      </div>\n    </div>\n    </div>\n  );\n\n};\n\nexport default ComponentLink;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Routes from \"src/Routes\";\nimport GraphManager from \"../models/GraphManager\";\nimport NodeLink from \"./NodeLink\";\nimport WeightService from \"../service/WeightService\";\nimport SubcomponentLink from \"./SubcomponentLink\";\nimport ComponentLink from \"./ComponentLink\";\n\ntype Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  onSelect: (graphName: string, key: string) => any;\n};\n\nconst ComponentSummary = ({ graphManager, weightService, componentName, onSelect }: Props) => {\n  const graph = graphManager.getComponent(componentName);\n  const history = useHistory();\n  const scopedBindings = graph.nodes.filter(binding => !!binding.scope);\n  const componentSet = new Set<string>();\n  graph.nodes\n    .filter(binding => binding.component != undefined && binding.component !== componentName)\n    .forEach(binding => componentSet.add(binding.component as string));\n\n  const membersInjectors = graph.nodes.filter(\n      binding =>\n        binding.kind === \"MEMBERS_INJECTION\"\n    );\n\n  const componentProvisions = graph.nodes[0].dependencies\n\n  const multiBindings = graph.nodes.filter(\n    binding =>\n      binding.kind === \"MULTIBOUND_SET\" || binding.kind === \"MULTIBOUND_MAP\"\n  );\n\n  scopedBindings.sort((nodeA, nodeB) => {\n    const weightA = weightService.getWeight(componentName, nodeA.key);\n    const weightB = weightService.getWeight(componentName, nodeB.key);\n    return (weightB ? weightB.value : 0) - (weightA ? weightA.value : 0);\n  });\n\n  multiBindings.sort((nodeA, nodeB) => {\n    const weightA = weightService.getWeight(componentName, nodeA.key);\n    const weightB = weightService.getWeight(componentName, nodeB.key);\n    return (weightB ? weightB.value : 0) - (weightA ? weightA.value : 0);\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          <ComponentLink\n            componentName={componentName}\n            weight={weightService.getWeight(componentName)}\n          />\n        </div>\n\n        {componentProvisions.length > 0 && \n          <div>Component Provisions:\n          {componentProvisions.map(binding =>\n            <NodeLink\n              key={binding.key}\n              scoped={true}\n              node={binding}\n              onSelect={node => onSelect(componentName, node)}\n            />\n          )}\n          </div>\n        }\n\n        {membersInjectors.length > 0 &&\n          <div>\n          <br />\n          <h6>Members Injectors:</h6>\n          {membersInjectors.map(binding => {\n            return (\n              <NodeLink\n                key={binding.key}\n                weight={weightService.getWeight(componentName, binding.key)}\n                scoped={true}\n                node={binding}\n                onSelect={node => onSelect(componentName, node)}\n              />\n            );\n          })}\n        </div>\n        }\n\n        {componentSet.size > 0 &&\n          <div>\n            <br />\n            <h6>{componentSet.size} Subcomponents:</h6>\n            {Array.from(componentSet).map(subcomponent => {\n              return (\n                <SubcomponentLink\n                  subcomponentName={subcomponent}\n                  weight={graphManager.getSubcomponentWeight(subcomponent)}\n                  onSelect={node =>\n                    history.push(Routes.SubComponent(componentName, subcomponent))\n                  }\n                />\n              );\n            })}\n          </div>\n        }\n\n        {multiBindings.length > 0 &&\n          <div>\n            <br />\n            <h6>{multiBindings.length} Multibindings:</h6>\n            {multiBindings.map(binding => {\n              return (\n                <NodeLink\n                  key={binding.key}\n                  weight={weightService.getWeight(componentName, binding.key)}\n                  scoped={true}\n                  node={binding}\n                  onSelect={node => onSelect(componentName, node)}\n                />\n              );\n            })}\n          </div>\n        }\n\n        {scopedBindings.length > 0 &&\n          <div>\n            <br />\n            <h6>{scopedBindings.length} Scoped Bindings:</h6>\n            {scopedBindings.map(binding => {\n              return (\n                <NodeLink\n                  key={binding.key}\n                  weight={weightService.getWeight(componentName, binding.key)}\n                  scoped={true}\n                  node={binding}\n                  onSelect={node => onSelect(componentName, node)}\n                />\n              );\n            })}\n          </div>\n        }\n\n      </div>\n    </div>\n  );\n};\n\nexport default ComponentSummary;\n","import React, { useState, useMemo, useRef, useEffect } from \"react\";\nimport GraphManager, { GraphMatchResult } from \"../models/GraphManager\";\nimport Autosuggest from \"react-autosuggest\";\nimport NodeWeight from \"./NodeWeight\";\nimport WeightService from \"../service/WeightService\";\nimport DisplayNameHelper from \"../util/DisplayNameHelper\";\nimport \"./NodeToolTip.css\";\nimport LinkImg from \"../util/link.png\"\nimport Copy from \"clipboard-copy\"\n\nconst MAX_SUGGESTIONS = 40;\n\ninterface Props {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string | null | undefined;\n  onSelect: (component: string | undefined, node: string) => any;\n}\n\nfunction getSuggestions(\n  graphManager: GraphManager,\n  componentName: string,\n  value: string\n): GraphMatchResult[] {\n  return graphManager.getMatches(\n    \"\",\n    value.trim().toLowerCase(),\n    MAX_SUGGESTIONS,\n    false\n  );\n}\n\nconst NodeAutosuggest = ({ graphManager, weightService, onSelect, componentName }: Props) => { \n  const [query, setQuery] = useState(\"\");\n  const searchRef = useRef<Autosuggest<GraphMatchResult>>(null);\n  const displayNameHelper = new DisplayNameHelper()\n  const [copiedFullName , copyHandler ]  = useState(false)\n\n  const suggestions = useMemo(\n    () => getSuggestions(graphManager, componentName || \"\", query),\n    [graphManager, componentName, query]\n  );\n\n  const autoFocusInput = (event?: KeyboardEvent) => {\n    if (event && event.metaKey) {\n      return false;\n    }\n    searchRef &&\n      searchRef.current &&\n      searchRef.current.input &&\n      searchRef.current.input.focus();\n  };\n\n  const CopiedComponent = () => {\n    useEffect(() => {\n      // component will hide after 5 seconds\n      const timer = setTimeout(() => copyHandler(false), 5000);\n      return () => clearTimeout(timer);\n    }, []);\n    return (\n      <div className = \"copiedTextAutosuggest\">\n        <span>Copied Component</span>\n        <br/>\n      </div>\n    );\n  }\n\n  useEffect(() => {\n    autoFocusInput();\n    window.addEventListener(\"keydown\", autoFocusInput);\n    return () => window.removeEventListener(\"keydown\", autoFocusInput);\n  }, []);\n\n  return (\n    <div>\n      <Autosuggest<GraphMatchResult>\n        ref={searchRef}\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={() => {}}\n        onSuggestionsClearRequested={() => setQuery(\"\")}\n        onSuggestionSelected={(_, data) => {\n          onSelect(data.suggestion.componentName, data.suggestion.node.key);\n        }}\n        getSuggestionValue={suggestion => suggestion.node.key}\n        // TODO: Replace with simple node\n        renderSuggestion={suggestion => (\n          <div className = \"tooltip_suggest\">\n            <span className=\"light-text\">\n              {suggestion.componentName\n                ? \"[\" + suggestion.componentName.split(\".\").pop() + \"] \"\n                : \"\"}\n                {copyHandler(false)}\n            </span>\n            {displayNameHelper.displayNameForKey(suggestion.node.key)} \n              <span className=\"tooltiptext_suggest\"  onClick={ () => Copy(suggestion.node.key)}>\n                <img src = {LinkImg} height = {12} width = {12} onClick={ () => copyHandler(true)}\n                /> &nbsp;{suggestion.node.key} \n              </span>\n            <NodeWeight\n              weight={weightService.getWeight(\n                suggestion.componentName,\n                suggestion.node.key\n              )}\n            />\n          </div>\n        )}\n        inputProps={{\n          value: query,\n          placeholder: \"Find dependencies\",\n          onChange: (_, params) => {\n            setQuery(params.newValue);\n          }\n        }}\n      />\n      {copiedFullName && <CopiedComponent/>}\n      </div>\n  );\n};\n\nexport default NodeAutosuggest;\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { Link } from \"react-router-dom\";\nimport Routes from \"src/Routes\";\nimport CodeLink from \"./CodeLink\";\nimport NodeWeight from \"./NodeWeight\";\nimport WeightServiceManager from \"../service/WeightServiceManager\";\nimport ComponentLink from \"./ComponentLink\";\n\ntype Props = {\n  graphManager: GraphManager;\n  weightServiceManager: WeightServiceManager;\n};\n\nconst Home = ({ graphManager, weightServiceManager }: Props) => {\n\n  var components = graphManager.componentSet.components\n\n  const weightService = weightServiceManager.getWeightService();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">Components</div>\n        {components.map(component => {\n          return <ComponentLink\n            componentName={component.name}\n            weight={weightService.getWeight(component.name)}\n          />\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import GraphReducer from \"./GraphReducer\";\nimport ComponentSet, { Node, Component, Module, Scope, Weight } from \"./Graph\";\nimport axios from \"axios\";\nimport { ClassInfo } from \"./ClassSize\";\nimport Config from \"./Config\";\n\nexport const ALL_COMPONENTS = \"\";\n\nexport type GraphMatchResult = { node: Node; componentName: string };\n\nconst SUBCOMPONENT_LARGE_THRESHOLD = 500;\nconst SUBCOMPONENT_SMALL_THRESHOLD = 10;\n\n/**\n * Wrapper to load the graph\n */\nexport default class GraphManager {\n  manifestUrl?: string;\n  classInfoUrl?: string;\n\n  componentSet: ComponentSet = { components: [] };\n  classInfo?: { [key: string]: ClassInfo };\n\n  // Caches to speed up graph-based operations\n  private nodeMap: { [componentName: string]: { [key: string]: Node } } = {};\n  private componentMap: { [componentName: string]: Component } = {};\n  private provisionsToExposingComponentsMap: { [key: string]: Array<string> } = {};\n  private subcomponentWeights: { [key: string]: Weight }  = {};\n  private callsitesMap: {\n    [componentName: string]: { [key: string]: Node[] };\n  } = {};\n\n  async loadUrl(manifestUrl: string): Promise<boolean> {\n    let classInfoUrl = manifestUrl.substring(0, manifestUrl.lastIndexOf(\"\\/\") + 1) + \"ClassInfo.json\";    \n\n    try {\n      let classInfoResponse = await axios.get(classInfoUrl);\n      this.classInfo = classInfoResponse.data as { [key: string]: ClassInfo };\n    } catch {\n      // classInfo is optional\n    }\n    try {\n      let manifestResponse = await axios.get(manifestUrl)      \n      this.componentSet = manifestResponse.data as ComponentSet;\n      this.populateCaches();\n    } catch {\n      return false;\n    }\n\n    this.manifestUrl = manifestUrl;\n    this.classInfoUrl = classInfoUrl;\n    return true;\n  }\n  \n  async loadFile(manifestFile: File): Promise<boolean> {\n    let manifestResponse = await this.readFileAsync(manifestFile)\n    this.componentSet = JSON.parse(manifestResponse) as ComponentSet;\n    this.populateCaches();\n    return true;\n  }\n\n  async readFileAsync(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        resolve(reader.result as string);\n      };\n\n      reader.onerror = reject;\n      reader.readAsText(file);\n    })\n  }\n\n  getMatches(\n    componentName: string | undefined,\n    query: string,\n    max: number,\n    strictMatch: boolean\n  ): GraphMatchResult[] {\n    const components = componentName\n      ? [this.getComponent(componentName)]\n      : this.componentSet.components;\n\n    let matches = [];\n\n    for (const component of components) {\n      for (const node of component.nodes) {\n\n        if (strictMatch) {\n          if (node.key.toLowerCase() == query.toLowerCase()) {\n            matches.push({ node, componentName: component.name });\n          }\n        } else if (node.key.toLowerCase().includes(query.toLowerCase())) {\n          matches.push({ node, componentName: component.name });\n        }\n\n        if (matches.length >= max) {\n            return matches;\n        }\n      }\n    }\n\n    return matches;\n  }\n\n  getComponent(componentName: string): Component {\n    const component = this.componentMap[componentName];\n\n    return component;\n  }\n\n  getNode(component: string | undefined, node: string): Node | undefined {\n    return this.nodeMap[component ? component : ALL_COMPONENTS][node];\n  }\n\n  getModule(component: string, moduleName: string): Module {\n    const nodes = Object.values(this.nodeMap[component]).filter((node: Node) => {\n      return node.module === moduleName;\n    });\n\n    return {\n      key: moduleName,\n      bindings: nodes\n    };\n  }\n\n  getScope(component: string, scope: string): Scope {\n    const nodes = Object.values(this.nodeMap[component]).filter((node: Node) => {\n      return node.scope === scope;\n    });\n\n    return {\n      scope: scope,\n      bindings: nodes\n    };\n  }\n\n  getCallsites(componentName: string, node: string): Node[] {\n    return (this.callsitesMap[componentName][node] || []).map((binding: Node) => {\n      const reference = this.getNode(componentName, binding.key);\n      if (!reference) {\n        return binding;\n      }\n\n      const referenceNode = reference.dependencies.find(d => d.key === node);\n\n      if (!referenceNode) {\n        return binding;\n      }\n\n      return {\n        ...binding,\n        kind: referenceNode.kind\n      };\n    });\n  }\n\n  /**\n   * Returns components that can provide a given dependency\n   */\n  getDependencyProviders(key: string): string[] {\n    return this.provisionsToExposingComponentsMap[key]\n  }\n\n  getSubcomponentWeight(subcomponent: string): Weight {\n    return this.subcomponentWeights[subcomponent];\n  }\n\n  getSubcomponentBindings(component: string, subcomponent: string): Node[] {\n    return Object.values(this.nodeMap[component]).filter((node: Node) => {\n      return node.component === subcomponent\n    });\n  }\n\n  computeNodeWeight(componentName: string, key: string, graphReducer: GraphReducer): Weight {\n    const node = this.getNode(componentName, key);\n    if (node) {\n      return this.computeWeightForNodes(componentName, [node], graphReducer);\n    }\n    return graphReducer.result();\n  }\n\n  /** Computes weight for a list of nodes, aggregating and returning result from graph reducer. */\n  computeWeightForNodes(componentName: string, queue: Node[], graphReducer: GraphReducer): Weight {\n    const visited: { [key: string]: boolean } = {};\n    while (queue.length) {\n      const queueNode = queue.shift();\n\n      // TODO: This can be undefined due to bad shouldSkipNode logic\n      if (!queueNode) {\n        continue;\n      }\n\n      graphReducer.reduce(queueNode.key);\n      visited[queueNode.key] = true;\n\n      for (const dependency of queueNode.dependencies) {\n        if (visited[dependency.key]) {\n          continue;\n        } else if (this.shouldSkipWeight(componentName, dependency.key)) {\n          visited[dependency.key] = true;\n          continue;\n        }\n\n        graphReducer.reduce(dependency.key);\n\n        const node = this.getNode(componentName, dependency.key);\n        if (node) {\n          queue.push(node);\n        }\n        visited[dependency.key] = true;\n      }\n    }\n\n    return graphReducer.result();\n  }\n\n  private shouldSkipWeight(componentName: string, dependencyKey: string): boolean | undefined {\n    const bindingInComponent = this.getNode(componentName, dependencyKey);\n    return (\n      bindingInComponent && bindingInComponent.kind === \"MEMBERS_INJECTION\"\n    );\n  }\n\n  private populateCaches() {\n    // Store all nodes under `ALL_COMPONENTS` key for universal search\n    this.nodeMap[ALL_COMPONENTS] = {};\n    this.callsitesMap[ALL_COMPONENTS] = {};\n\n    // traverse the components\n    for (const component of this.componentSet.components) {\n      this.nodeMap[component.name] = {};\n      this.callsitesMap[component.name] = {};\n      this.componentMap[component.name] = component;\n\n      // TODO: should avoid modifying the components\n      component.nodes = component.nodes.filter(node => !this.shouldSkipNode(node));\n\n      for (const node of component.nodes) {\n\n        if (node.key == component.name) {\n          // The component itself is a node with its own usable dependencies\n          for (const dependency of node.dependencies) {\n            var arr = this.provisionsToExposingComponentsMap[dependency.key]\n            if (!arr) {\n              arr = Array<string>()\n              this.provisionsToExposingComponentsMap[dependency.key] = arr\n            }\n            arr.push(component.name)\n          }\n        }\n\n        this.nodeMap[component.name][node.key] = node;\n        this.nodeMap[ALL_COMPONENTS][node.key] = node;\n\n        // populate subcomponent weight\n        if (node.component && node.component != component.name) {\n          let subcomponent = node.component;\n          if (!this.subcomponentWeights[subcomponent]) {\n            this.subcomponentWeights[subcomponent] = {\n              value: 0,\n              smallThreshold: SUBCOMPONENT_SMALL_THRESHOLD,\n              largeThreshold: SUBCOMPONENT_LARGE_THRESHOLD\n            } as Weight;\n          }\n          this.subcomponentWeights[subcomponent].value++;\n        }\n\n        for (const dep of node.dependencies) {\n          if (!this.callsitesMap[component.name][dep.key]) {\n            this.callsitesMap[component.name][dep.key] = [];\n          }\n          if (!this.callsitesMap[ALL_COMPONENTS][dep.key]) {\n            this.callsitesMap[ALL_COMPONENTS][dep.key] = [];\n          }\n\n          this.callsitesMap[component.name][dep.key].push(node);\n          this.callsitesMap[ALL_COMPONENTS][dep.key].push(node);\n        }\n      }\n    }\n  }\n\n  private shouldSkipNode(node: Node): boolean {\n    return node.kind === \"BOUND_INSTANCE\";\n  }\n}\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { ALL_COMPONENTS } from \"../models/GraphManager\";\nimport { useHistory } from \"react-router-dom\";\nimport NodeLink from \"./NodeLink\";\nimport Routes from \"src/Routes\";\nimport WeightService from \"../service/WeightService\";\n\nexport type Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  moduleName: string;\n};\n\nexport function ModuleSummary({ componentName, moduleName, graphManager, weightService }: Props) {\n  const graphModule = graphManager.getModule(componentName, moduleName);\n  const history = useHistory();\n\n  if (!graphModule) {\n    return (\n      <div>\n        Cannot find ${graphModule} module in ${componentName} graph\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          Module: {graphModule.key}\n        </div>\n\n        <h6>Bindings</h6>\n        {graphModule.bindings.map(node => {\n          return (\n            <NodeLink\n              key={node!.key}\n              weight={weightService.getWeight(ALL_COMPONENTS, node!.key)}\n              scoped={true}\n              node={node!}\n              onSelect={node => {\n                history.push(Routes.GraphNode(componentName, node));\n              }}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import Select from \"react-select\";\nimport React from \"react\";\nimport { ValueType, OptionTypeBase } from \"react-select/src/types\";\n\ninterface Props {\n  componentName: string;\n  graphs: String[];\n  selectGraph: (componentName: string) => any;\n}\n\nfunction displayName(component: string): string {\n  var pos = component.lastIndexOf('.')\n  if (pos === -1) {\n    return component\n  }\n  return component.substring(pos+1)\n}\n\n/**\n * Component Selector\n * If no component is specified `All Components` will be picked\n */\nexport const GraphSelector = ({\n  componentName,\n  graphs,\n  selectGraph\n}: Props) => {\n  let graphOptions = graphs.map(graph => {\n    return { value: graph, label: displayName(graph.toString()) };\n  });\n\n  let defaultValue = componentName\n    ? ({ value: componentName, label: displayName(componentName) } as ValueType<OptionTypeBase, false>)\n    : graphOptions[0];\n\n  return (\n    <Select\n      value={defaultValue}\n      className=\"component-select\"\n      classNamePrefix=\"react-select\"\n      onChange={value => selectGraph((value as unknown as { value: string }).value)}\n      placeholder=\"Select graph...\"\n      options={graphOptions}\n    />\n  );\n};\n","import React from \"react\";\nimport GraphManager, { GraphMatchResult } from \"../models/GraphManager\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport NodeLink from \"./NodeLink\";\nimport Routes from \"src/Routes\";\nimport { GraphSelector } from \"./GraphSelector\";\nimport WeightService from \"../service/WeightService\";\nimport { Node } from \"src/models/Graph\";\nimport DisplayNameHelper from \"src/util/DisplayNameHelper\";\n\nexport type Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  nodeName: string;\n  fullDetails: boolean;\n};\n\nexport type SearchProps = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  nodeName: string;\n};\n\nfunction readableKind(kind: String) {\n  // https://github.com/google/dagger/blob/master/java/dagger/model/BindingKind.java\n  switch(kind) {\n    case \"PROVISION\":\n      return \"Module provision\"\n    case \"INJECTION\":\n      return \"@Inject constructor\"\n    case \"DELEGATE\":\n      return \"@Binds delegate\"\n    case \"MEMBERS_INJECTION\":\n        return \"Members Injector\"\n    case \"COMPONENT\":\n      return \"Component\"\n    case \"COMPONENT_DEPENDENCY\":\n      return \"Component Dependency\"\n    case \"COMPONENT_PROVISION\":\n      return \"Component Provision\"\n    case \"COMPONENT_PRODUCTION\":\n      return \"Component Production\"\n    case \"BOUND_INSTANCE\":\n      return \"Bound instance\"\n    case \"MULTIBOUND_SET\":\n      return \"Multibound Set\"\n    case \"MULTIBOUND_MAP\":\n      return \"Multibound Map\"\n    case \"OPTIONAL\":\n      return \"Optional\"\n    case \"SUBCOMPONENT_CREATOR\":\n      return \"Subcomponent Creator\"\n  }\n\n  return kind\n}\n\nfunction getProvidingComponents(graphManager: GraphManager, componentName: string, node: Node) {\n  var components = graphManager.getDependencyProviders(node.key)\n  if (components === undefined) {\n    return undefined\n  }\n\n  return components.map(t => \n    <div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n      <Link\n        className=\"soft-link\"\n        to={Routes.Component(t)}\n      >{t.substring(1 + t.lastIndexOf('.'))}\n      </Link>\n      &nbsp;|&nbsp;\n      <Link\n        className=\"soft-link\"\n        to={Routes.GraphNode(t, node.key)}\n      >Implementation\n      </Link>\n    </div>\n  )\n}\n\nfunction createdComponent(graphManager: GraphManager, componentName: string, node: Node) {\n  if (!node.adjacentNodes) {\n    return \"\"\n  }\n  \n  for (var nodeKey of node.adjacentNodes) {\n    var componentNode = graphManager.getNode(componentName, nodeKey);\n    // Node.Kind will be null for ComponentNodes\n    // Node.key == componentName for parent components\n    if (componentNode && !componentNode.kind && nodeKey != componentName) {\n      return nodeKey\n    }\n  }\n  return \"\"\n}\n\nexport function NodeSearch({ graphManager, weightService, nodeName }: SearchProps) {\n  //search for the top five choices the nodeName could be in the Graph based on the nodeName\n  //use component name in angle brackets as the nodeName\n    let searchResult: GraphMatchResult[] = searchHandler(nodeName, graphManager)\n    if(searchResult.length == 1) {\n      // return full summary for the one result found\n      var props: Props = {graphManager, weightService, componentName : searchResult[0].componentName, nodeName : searchResult[0].node.key, fullDetails : true}\n      return NodeSummary(props)\n    } else if (searchResult.length > 1) {\n      if (displayFullSummary(searchResult, nodeName)) {\n        // return full node Summary if exactly 1 of the result nodes are equal to the short name of a node \n        const displayNameHelper = new DisplayNameHelper()\n        let uniqueName = searchResult.filter(component => displayNameHelper.displayNameForKey(component.node.key) == nodeName)\n        var props: Props = {graphManager, weightService, componentName : uniqueName[0].componentName, nodeName : uniqueName[0].node.key, fullDetails : true}\n        return NodeSummary(props)\n      } else {\n        // will partially display each nodes summary\n          return (\n            <div>\n              {searchResult.map(component => {\n                var prop : Props = {graphManager, weightService, componentName : component.componentName, nodeName : component.node.key, fullDetails: false}\n                return NodeSummary(prop)\n              })}\n            </div>\n          )\n      }\n    } else {\n      // return if nodeName is not found in the graph\n      return (\n        <div>\n          Results for node name <strong><i>{nodeName}</i></strong> are not found in graph.\n        </div>\n      )\n    }\n}\n\nfunction displayFullSummary(searchResult: GraphMatchResult[], nodeName: string) : boolean {\n  const displayNameHelper = new DisplayNameHelper()\n  //counts how many short names in the graph equal to the nodeName \n  var commonCount = searchResult.filter(component => displayNameHelper.displayNameForKey(component.node.key) == nodeName);\n  // return false if there isn't a unique shortName equal to the nodeName\n  if (commonCount.length != 1) {\n    return false\n  }\n  return true\n}\n\nfunction searchHandler(nodeName: string, graphManager: GraphManager): GraphMatchResult[] {\n  const displayNameHelper = new DisplayNameHelper()\n// replace angle brackets , annotation '@', & commas with ' ' to create tokens\n  nodeName = nodeName.replace(/<|>|@|,/g,' ');\n  // create list of tokens\n  let tokenList : string[] = nodeName.split(' ').filter(token => token != \"\")\n  // list of components found based on tokens\n  let resultComponents: GraphMatchResult[] = []\n  let setOfComponents: Set<string> = new Set()\n  tokenList.forEach(token => {\n    //get search results for each token\n    var searchResult: GraphMatchResult[] = graphManager.getMatches(\"\", token, 40, false);\n    searchResult.forEach(component => {\n      // check if every token in tokenList is included in a component\n      let addComponent : boolean = tokenList.every(token => displayNameHelper.displayNameForKey(component.node.key).includes(token))\n      // do not add if component is a duplicate & components list < 5\n      if(addComponent && !setOfComponents.has(component.node.key) && resultComponents.length < 5){\n        resultComponents.push(component)\n          setOfComponents.add(component.node.key)\n      }\n    })\n  })\n  return resultComponents\n}\n\nexport function NodeSummary({ graphManager, weightService, componentName, nodeName, fullDetails }: Props) {\n  const history = useHistory();\n  const displayNameHelper = new DisplayNameHelper()\n  const node = graphManager.getNode(componentName, nodeName);\n\n  if (!node) {\n    return (\n      <div>\n      Cannot find <strong>{nodeName}</strong> node in <strong>{componentName}</strong> graph\n      </div>\n    );\n  }\n\n  const bindingModule = node.module;\n  const availableGraphs = graphManager.getMatches(\"\", node.key, 40, true).map(it => it.componentName)\n  const callsites = graphManager.getCallsites(componentName, node.key);\n  const bindingKind = readableKind(node.kind)\n  const componentSimpleName = componentName.substring(componentName.lastIndexOf('.') + 1)\n  const simpleScope = node.scope && node.scope.substring(node.scope.lastIndexOf('.') + 1)\n  const createdComponentKey: string = createdComponent(graphManager, componentName ,node);\n  const providingComponents = getProvidingComponents(graphManager, componentName ,node);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          <NodeLink\n              node={node}\n              weight={weightService.getWeight(componentName, node.key)}\n              onSelect={() => \n                history.push(Routes.GraphNode(componentName, node.key))\n              }\n              />\n        </div>\n\n        <p>\n          <span className=\"unselectable\">Component: </span>\n          {availableGraphs.length == 1 &&\n          <Link\n            className=\"soft-link\"\n            to={Routes.Component(componentName)}\n          >\n            {componentSimpleName}\n          </Link>\n          }\n          {availableGraphs.length > 1 &&\n          <GraphSelector\n              componentName={componentName}\n              graphs={availableGraphs}\n              selectGraph={graph => history.push(Routes.GraphNode(graph, node.key))}\n          />\n          }\n        </p>\n\n\n        {node.component && (componentName !== node.component) && (\n        <p>\n        <span className=\"unselectable\">Subcomponent: </span>\n        <Link\n                className=\"soft-link\"\n                to={Routes.SubComponent(componentName, node.component)}\n              >\n              <div className=\"tooltip_link\">\n              {displayNameHelper.displayNameForKey(node.component)}\n                <span className=\"tooltiptext_link\">{node.component}</span>\n              </div>\n          </Link>\n        </p>\n        )}\n\n        <p>\n          <span>Type: </span>\n          {bindingKind}\n          {createdComponentKey && \n            <span className=\"unselectable\"> | &nbsp;\n            <Link\n                    className=\"soft-link\"\n                    to={Routes.GraphNode(componentName, createdComponentKey)}\n                  >\n                    {createdComponentKey}\n              </Link>\n              </span>\n            }\n        </p>\n\n        {node.scope && (\n          <p>\n            <span className=\"unselectable\">Scope: </span>\n            <Link\n                className=\"soft-link\"\n                to={Routes.GraphScope(componentName, node.scope)}\n              >\n                @{simpleScope}\n              </Link>\n          </p>\n        )}\n\n        {node.module && (\n          <p>\n            <span className=\"unselectable\">Module: </span>\n            {bindingModule ? (\n              <Link\n                className=\"soft-link\"\n                to={Routes.GraphModule(componentName, node.module)}\n              >\n                <div className=\"tooltip_link\">\n                  {displayNameHelper.displayNameForKey(bindingModule)}\n                  <span className=\"tooltiptext_link\">{bindingModule}</span>\n              </div>\n              </Link>\n            ) : (\n              <span>n/a</span>\n            )}\n          </p>\n        )}\n\n        {node.kind == \"COMPONENT_PROVISION\" && (\n          <p>\n          <span className=\"unselectable\">Provided by: </span>\n          {providingComponents}\n        </p>\n        )}\n\n        <br />\n  {fullDetails && \n  <div> \n        <h6>Dependencies\n          &nbsp;|&nbsp;\n          <Link\n            className=\"soft-link\"\n            to={Routes.GraphClosure(componentName, node.key)}\n          >\n          Transitive\n          </Link>\n          &nbsp;|&nbsp;\n          <Link\n            className=\"soft-link\"\n            to={Routes.Tree(componentName, node.key)}\n          >\n          Tree\n          </Link>\n        </h6>\n        {node &&\n          node.dependencies\n            .map(d => ({\n              node: graphManager.getNode(componentName, d.key),\n              dep: d\n            }))\n            .filter(({ node }) => node !== undefined)\n            .map(({ node, dep }) => {\n              return (\n                <NodeLink\n                  key={node!.key}\n                  weight={weightService.getWeight(componentName, node!.key)}\n                  kind={dep.kind}\n                  scoped={true}\n                  node={node!}\n                  onSelect={node =>\n                    history.push(Routes.GraphNode(componentName, node))\n                  }\n                />\n              );\n            })}\n        {!node || (node.dependencies.length === 0 && <div>None</div>)}\n        <br />\n        <h6>Callsites</h6>\n        {callsites.map(binding => {\n          return (\n            <NodeLink\n              key={binding.key}\n              node={binding}\n              kind={binding.kind}\n              scoped={true}\n              onSelect={node => history.push(Routes.GraphNode(componentName, node))}\n            />\n          );\n        })}\n        {callsites.length === 0 && <div>None</div>}\n        </div>\n        }\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { ALL_COMPONENTS } from \"../models/GraphManager\";\nimport { useHistory } from \"react-router-dom\";\nimport NodeLink from \"./NodeLink\";\nimport WeightService from \"../service/WeightService\";\n\nexport type Props = {\n  graphManager: GraphManager;\n  weightService: WeightService;\n  componentName: string;\n  scope: string;\n};\n\nexport function ScopeSummary({ graphManager, weightService, componentName, scope }: Props) {\n  const graphScope = graphManager.getScope(componentName, scope);\n  const history = useHistory();\n\n  if (!graphScope) {\n    return (\n      <div>\n        Cannot find ${graphScope} module in ${componentName} graph\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          Scope\n          <br />\n          {graphScope.scope}\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col s12\">\n            <h6>Bindings ({graphScope.bindings.length})</h6>\n            {graphScope.bindings.map(node => {\n              return (\n                <NodeLink\n                  key={node.key}\n                  weight={weightService.getWeight(ALL_COMPONENTS, node.key)}\n                  scoped={true}\n                  node={node}\n                  onSelect={node => {\n                    history.push(`/${componentName}/node/${node}`);\n                  }}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Node } from \"../models/Graph\";\nimport GraphManager from \"../models/GraphManager\";\nimport Routes from \"src/Routes\";\nimport NodeLink from \"./NodeLink\";\n\nconst NO_SCOPE = \"@\"\n\ntype Props = {\n  graphManager: GraphManager,\n  componentName: string,\n  nodeName: string;\n};\n\ntype Dependencies = {\n  bindings: { [key:string]:Node[]; }\n  modules: { [key:string]:Node[]; }\n  moduleSummary: { [key:string]:number; }\n}\n\nexport default function NodeClosure({ graphManager, componentName, nodeName }: Props) {\n\n  const dependencies = getDependencies(graphManager, componentName, nodeName);\n\n  const scopedDependencies = Object.keys(dependencies.bindings).filter((scope: string) => {\n    return scope != NO_SCOPE && scope != \"@dagger.Reusable\"\n  });\n\n  const modules = Object.keys(dependencies.modules);\n\n  const history = useHistory();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"card-title\">\n          Transitive Dependencies: {nodeName}\n        </div>      \n\n        {scopedDependencies.length > 0 && (\n          <div>\n            <br/>\n            <h6>Scoped Bindings</h6>\n            { scopedDependencies.map((scope: string) => {\n              return (<div>\n                <p>{getScopeDisplayName(scope)}</p>\n                {dependencies.bindings[scope].map((binding: Node) => {\n                return (\n                  <div>{binding.key}</div>\n                )  \n              })}</div>)\n            })}\n          </div>\n        )}\n\n        {modules.length > 0 && (\n          <div>\n            <br/>\n            <h6>Module Bindings</h6>\n            { modules.map((module: string) => {\n              return (\n                <div>\n                  <div>\n                    <Link className=\"soft-link\" to={Routes.GraphModule(componentName, module)}>\n                      {getModuleDisplayName(module)}\n                    </Link>\n                    &nbsp;\n                    (\n                    {dependencies.modules[module].length}\n                    /\n                    {dependencies.moduleSummary[module]}\n                    )\n                  </div>\n                  {dependencies.modules[module].map((binding: Node) => {\n                    return (\n                      <NodeLink\n                        key={binding.key}\n                        node={binding}\n                        kind={binding.kind}\n                        scoped={true}\n                        onSelect={node => history.push(Routes.GraphNode(componentName, binding.key))}\n                      />\n                    );  \n                  })}\n                </div>\n              )\n            })}\n          </div>\n        )}          \n      </div>\n    </div>\n  );\n}\n\nfunction getDependencies(graphManager: GraphManager, componentName: string, nodeName: string): Dependencies {\n  const visited: { [key:string]:boolean; } = {}\n  const queue: string[] = [nodeName]\n\n  const bindings: { [key:string]:Node[]; } = {}\n  const moduleBindings: { [key:string]:Node[]; } = {}\n  const moduleSummary: { [key:string]:number } = {}\n\n\n  // Module overviews\n  graphManager.getComponent(componentName).nodes.forEach(node => {\n    const module = node.module\n    if (module) {\n      moduleSummary[module] = (moduleSummary[module] || 0) + 1\n    }\n  })\n\n  while (queue.length != 0) {\n    const bindingKey = queue.shift()\n\n    if (!bindingKey || visited[bindingKey]) {\n      continue;\n    }\n    visited[bindingKey] = true\n    \n    const binding = graphManager.getNode(componentName, bindingKey)\n    if (binding) {\n      // Add this binding to our output\n      if (binding.module) {\n        var mb = moduleBindings[binding.module] || (moduleBindings[binding.module] = [])\n        mb.push(binding)\n      } else {\n        var sb = bindings[binding.scope || NO_SCOPE] || (bindings[binding.scope || NO_SCOPE] = [])\n        sb.push(binding)\n      }\n      \n      // Crawl binding dependencies\n      binding.dependencies.forEach(dep => {\n        queue.push(dep.key)\n      })\n    }\n  }\n\n  return {\n    bindings: bindings,\n    modules: moduleBindings,\n    moduleSummary: moduleSummary\n  }\n}\n\nfunction getScopeDisplayName(scope: string): string {\n  const idx = scope.lastIndexOf(\".\")\n  if (idx === -1) {\n    return scope\n  }\n  return \"@\" + scope.substring(idx + 1)\n}\n\nfunction getModuleDisplayName(module: string): string {\n  const parts = module.split(\".\")\n  if (parts.length == 0) {\n    return module\n  }\n  var i = 0\n  while (i < parts.length && parts[i][0] !== parts[i][0].toUpperCase()) {\n    i++;\n  }\n  if (i < parts.length) {\n    return parts.slice(i, parts.length).join(\".\")\n  }\n  return module\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Routes from \"src/Routes\";\nimport GraphManager from \"../models/GraphManager\";\nimport NodeLink from \"./NodeLink\";\nimport WeightService from \"../service/WeightService\";\n\ntype Props = {\n    graphManager: GraphManager;\n    subcomponentName: string;\n    componentName: string;\n    weightService: WeightService;\n  };\n\n\nconst SubcomponentSummary = ({ graphManager, subcomponentName, componentName, weightService}: Props) => {\n    const totalBinds = graphManager.getSubcomponentBindings(componentName, subcomponentName)\n    const history = useHistory();\n    totalBinds.sort((nodeA, nodeB) => {\n        const weightA = weightService.getWeight(componentName, nodeA.key);\n        const weightB = weightService.getWeight(componentName, nodeB.key);\n        return (weightB ? weightB.value : 0) - (weightA ? weightA.value : 0)\n    });\n\n    return (\n      <div className=\"card\">\n        <div className=\"card-content\">\n          <div className=\"card-title\">{subcomponentName}</div>\n          <div>{totalBinds.length} total bindings.</div>\n\n          <div>\n          {totalBinds.map(binding => {\n            return (\n              <NodeLink\n                key={binding.key}\n                weight={weightService.getWeight(componentName, binding.key)}\n                kind={binding.kind}\n                scoped={true}\n                node={binding}\n                onSelect={node => history.push(Routes.GraphNode(componentName, binding.key))}\n              />\n            );\n          })}\n          </div>\n\n        </div>\n      </div>\n    );\n};\n\nexport default SubcomponentSummary;\n","import React from \"react\";\nimport Select from \"react-select\";\nimport WeightServiceManager from \"../service/WeightServiceManager\";\n\ninterface Props {\n  weightServiceManager: WeightServiceManager;\n  onSelectWeight: (weight: string) => any;\n}\n\n/** Dropdown for selecting the metric for node weights. */\nexport default class WeightSelector extends React.Component<Props> {\n\n  metricOptions: Array<{ label: string, value: string }>;\n\n  constructor(props: Props) {\n    super(props);\n    this.metricOptions = this.props.weightServiceManager.getWeightServiceNames().map(name => {\n      return { label: name.charAt(0).toUpperCase() + name.slice(1), value: name };\n    });\n    this.state = this.metricOptions[0];\n  }\n\n  render() {\n    return (\n      <Select\n          className=\"component-select weight-select\"\n          classNamePrefix=\"react-select\"\n          value={this.metricOptions[0]}\n          onChange={selectedOption => {\n              const option = selectedOption as { value: string };\n              this.setState(option);\n              this.props.onSelectWeight(option.value);\n            }\n          }\n          options={this.metricOptions}\n      />\n    );\n  }\n}","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport GraphManager from \"../models/GraphManager\";\nimport Routes from \"src/Routes\";\nimport WeightService from \"../service/WeightService\";\nimport NodeWeight from \"./NodeWeight\";\nimport NodeIcon from \"./NodeIcon\";\nimport DisplayNameHelper from \"../util/DisplayNameHelper\";\nimport { MDBContainer, MDBCol, MDBTreeview, MDBTreeviewList, MDBTreeviewItem } from 'mdbreact';\n\ntype Props = {\n  graphManager: GraphManager,\n  componentName: string,\n  nodeName: string;\n  weightService: WeightService;\n};\n\ntype GraphOfNodes = {\n  mapOfNodes : Map<string, string[]>\n}\n\nfunction MDBFileSystemComponentNew (mapOfNodes:  Map<string, string[]>, nodeName: string, componentName: string, graphManager: GraphManager,   weightService: WeightService)  {\n  const displayNameHelper = new DisplayNameHelper()\n  const history = useHistory();\n  const rootNode = graphManager.getNode(componentName, nodeName)\n  const dependenciesIconMap: Map<string,string> = new Map()\n  if(rootNode && rootNode.dependencies.length > 0) {\n    rootNode.dependencies.map(node => {\n      dependenciesIconMap.set(node.key, node.kind)\n    })\n  }\n  \n  return (\n    <div>\n      {mapOfNodes.get(nodeName)?.map(node => {       \n        let isInstance = false\n        if(dependenciesIconMap.get(node) && dependenciesIconMap.get(node) == \"INSTANCE\") {\n          isInstance = true\n        }\n        let weight = weightService.getWeight(componentName, node)\n          if (mapOfNodes.get(node)?.length != 0) { \n            return (\n              <div style={{\"padding\" : \"10px\"}}>\n                  <NodeIcon kind = {dependenciesIconMap.get(node)}/>\n                  <span onClick={() => history.push(Routes.GraphNode(componentName, node))}>\n                        {displayNameHelper.displayNameForKey(node)}\n                  </span>\n                  <NodeWeight weight={weight}/>\n                <MDBTreeviewList icon =\"none\" opened={isInstance} fal tag = \"span\">\n                  {MDBFileSystemComponentNew(mapOfNodes, node, componentName, graphManager, weightService)}\n                </MDBTreeviewList>\n              </div>\n            )\n          } else {\n            return (\n              <div style={{\"padding\" : \"10px\"}}>\n                <NodeIcon kind = {dependenciesIconMap.get(node)}/>\n                <span onClick={() => history.push(Routes.GraphNode(componentName, node))}>\n                      {displayNameHelper.displayNameForKey(node)}\n                </span>\n                <NodeWeight weight={weight} />\n              </div>\n            )\n          }\n        })\n      }\n    </div>\n  )\n}\n\nexport default function TreeView({ graphManager, componentName, nodeName, weightService}: Props) {\n\n  const dependencies = getDependencies(graphManager, componentName, nodeName);\n  const history = useHistory();\n  const displayNameHelper = new DisplayNameHelper()\n  const mapOfComponents = dependencies.mapOfNodes\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">    \n        <div className=\"card-title\">\n            Tree for: {displayNameHelper.displayNameForKey(nodeName)} \n        </div> \n        <div className=\"card-title\">\n            Component: {componentName.substr(componentName.lastIndexOf(\".\") + 1)} \n        </div> \n        <MDBContainer>\n        <MDBCol>\n          <MDBTreeview className='w-200'>\n            <span onClick={() => history.push(Routes.GraphNode(componentName, nodeName))}>\n                      {displayNameHelper.displayNameForKey(nodeName)}\n            </span>\n            <MDBTreeviewList  icon =\"none\" opened = {true} far tag = \"span\">\n              {MDBFileSystemComponentNew(mapOfComponents, nodeName, componentName, graphManager, weightService)}\n            </MDBTreeviewList>\n          </MDBTreeview>\n        </MDBCol>\n      </MDBContainer>\n      </div>\n    </div>\n  );\n}\n\nfunction getDependencies(graphManager: GraphManager, componentName: string, nodeName: string): GraphOfNodes {\n  const visited: { [key:string]:boolean; } = {}\n  const queue: string[] = [nodeName]\n\n  const mapOfNodes : Map<string, string[]> = new Map()\n\n  while (queue.length != 0) {\n    const bindingKey = queue.shift()\n\n    if (!bindingKey || visited[bindingKey]) {\n      continue;\n    }\n    visited[bindingKey] = true\n    \n    const binding = graphManager.getNode(componentName, bindingKey)\n    if (binding) {\n      // construct graph\n      let listOfDependencies: string[] = []\n      binding.dependencies.forEach(depedency => {\n        if (!visited[depedency.key]) {\n          listOfDependencies.push(depedency.key)\n          queue.push(depedency.key)\n        }\n      })\n      mapOfNodes.set(bindingKey, listOfDependencies)\n    }\n  }\n  return {\n    mapOfNodes: mapOfNodes\n  }\n}\n","import React, { useMemo } from \"react\";\nimport GraphManager from \"../models/GraphManager\";\nimport { useHistory, Route, Switch } from \"react-router\";\nimport ComponentSummary from \"./ComponentSummary\";\nimport NodeAutosuggest from \"./NodeAutosuggest\";\nimport { BrowserHeader } from \"./BrowserHeader\";\nimport Home from \"src/components/Home\";\nimport { ModuleSummary } from \"src/components/ModuleSummary\";\nimport { NodeSearch, NodeSummary } from \"src/components/NodeSummary\";\nimport { ScopeSummary } from \"./ScopeSummary\";\nimport NodeClosure from \"src/components/NodeClosure\";\nimport SubcomponentSummary from \"src/components/SubcomponentSummary\";\nimport WeightSelector from \"../components/WeightSelector\";\nimport Routes, { Paths } from \"src/Routes\";\nimport WeightServiceManager from \"../service/WeightServiceManager\";\nimport classNames from \"classnames\";\nimport \"./GraphBrowser.css\";\nimport Config from \"src/models/Config\";\nimport TreeView from \"src/components/TreeView\"\n\ninterface Props {\n  graphManager: GraphManager;\n  weightServiceManager: WeightServiceManager;\n  componentName: string;\n}\n\nexport const GraphBrowser = ({ graphManager, weightServiceManager, componentName }: Props) => {\n  const graph = useMemo(() => componentName && graphManager.getComponent(componentName), [\n    graphManager,\n    componentName\n  ]);\n\n  const history = useHistory();\n\n  const weightService = weightServiceManager.getWeightService();\n\n  const includeWeightSelector = weightServiceManager.getWeightServiceNames().length > 1;\n\n  return (\n    <div>\n      <div className=\"container\">\n        <div className=\"row search-bar\">\n          <div className={classNames(\"col\", includeWeightSelector ? \"s9\": \"s12\")}>\n            <NodeAutosuggest\n              graphManager={graphManager}\n              weightService={weightService}\n              componentName={graph && graph.name}\n              onSelect={(componentName, node) =>\n                history.push(Routes.GraphNode(componentName || \"\", node))\n              }\n            />\n          </div>\n          {includeWeightSelector &&\n            <div className=\"col s3\">\n              <WeightSelector\n                  weightServiceManager={weightServiceManager}\n                  onSelectWeight={weight => {\n                    weightServiceManager.selectWeightService(weight);\n                    // Refresh the app state without affecting history.\n                    history.replace('#');\n                  }\n                }\n              />\n            </div>\n          }\n        </div>\n        <Switch>\n          <Route\n            path={Paths.Module}\n            render={props => (\n              <ModuleSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                moduleName={decodeURIComponent(props.match.params.module as string)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphModule}\n            render={props => (\n              <ModuleSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                moduleName={decodeURIComponent(props.match.params.module as string)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphScope}\n            render={props => (\n              <ScopeSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                scope={decodeURIComponent(props.match.params.scope as string)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphClosure}\n            render={props => (\n              <NodeClosure\n                graphManager={graphManager}\n                nodeName={decodeURIComponent(props.match.params.key as string)}\n                componentName={componentName}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.Tree}\n            render={props => (\n              <TreeView\n                graphManager={graphManager}\n                nodeName={decodeURIComponent(props.match.params.key as string)}\n                componentName={componentName}\n                weightService={weightService}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.SearchNode}\n            render={props => (\n              <NodeSearch\n                graphManager={graphManager}\n                weightService={weightService}\n                nodeName={decodeURIComponent(props.match.params.nodeName as string)}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.GraphNode}\n            render={props => (\n              <NodeSummary\n                graphManager={graphManager}\n                weightService={weightService}\n                nodeName={decodeURIComponent(props.match.params.node as string)}\n                componentName={componentName}\n                fullDetails={true}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.SubComponent}\n            render={props => (\n              <SubcomponentSummary\n                graphManager={graphManager}\n                subcomponentName={decodeURIComponent(props.match.params.subcomponent as string)}\n                componentName={componentName}\n                weightService={weightService}\n              />\n            )}\n          ></Route>\n          <Route\n            path={Paths.Component}\n            render={props => (\n              <ComponentSummary\n                componentName={decodeURIComponent(props.match.params.component as string)}\n                graphManager={graphManager}\n                weightService={weightService}\n                onSelect={(componentName, node) =>\n                  history.push(Routes.GraphNode(componentName || \"\", node))\n                }\n              />\n            )}\n          ></Route>\n          <Route\n            path=\"\"\n            render={props => (\n              <Home\n                graphManager={graphManager}\n                weightServiceManager={weightServiceManager}\n              />\n            )}\n          ></Route>\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default GraphBrowser;\n","import React from \"react\";\nimport Spinner from 'react-spinner-material';\n\nexport const GraphSpinner = () => {\n  return (\n    <div className=\"graph-spinner\">\n        <Spinner size={30} spinnerColor={\"#ee6e73\"} spinnerWidth={3} visible={true} radius={\"\"} color={\"\"} stroke={\"\"} />\n    </div>\n  );\n};\n\nexport default GraphSpinner;\n","import React, { useRef } from \"react\";\nimport {Modal, Button} from \"react-materialize\";\n\nexport interface Props {\n  trigger: React.ReactNode,\n  onChangeManifestUrl: (url: string) => void\n}\n\nexport function LoadManifestModal({ trigger, onChangeManifestUrl }: Props) {\n  const inputRef = useRef<HTMLInputElement>(null);\n  return (\n    <Modal\n      actions={[\n        <Button flat modal=\"close\" node=\"button\" waves=\"green\">Close</Button>,\n        <Button modal=\"close\" className=\"waves-effect waves-light red lighten-2\" node=\"button\" onClick={() => {\n          onChangeManifestUrl(inputRef.current!!.value)\n        }}>Load</Button>\n      ]}\n      bottomSheet={false}\n      fixedFooter={false}\n      header=\"Load manifest from URL\"\n      id=\"modal-0\"\n      options={{\n        dismissible: true,\n        endingTop: '10%',\n        inDuration: 250,\n        onCloseEnd: null,\n        onCloseStart: null,\n        onOpenEnd: null,\n        onOpenStart: null,\n        opacity: 0.5,\n        outDuration: 250,\n        preventScrolling: true,\n        startingTop: '4%'\n      }}\n      trigger={trigger}\n    >\n      <form className=\"\">\n        <input ref={inputRef} type=\"text\" className=\"textbox\" placeholder=\"Enter manifest URL\" onKeyDown={(ev) => {\n          if (ev.keyCode === 13) {\n            onChangeManifestUrl(inputRef.current!!.value)\n          }\n        }} />\n      </form>\n    </Modal>\n  );\n}\n","import React from \"react\";\nimport Spinner from \"./Spinner\";\nimport { BrowserHeader } from \"./BrowserHeader\";\nimport Autosuggest from \"react-autosuggest\";\nimport { LoadManifestModal } from \"./LoadManifestModal\";\n\ninterface Props {\n  loaded: boolean,\n  onChangeManifestUrl: (url: string) => void\n}\n\nexport const GraphBrowserLoader = ({ loaded, onChangeManifestUrl }: Props) => {\n  return (\n    <div>\n      <div className=\"container\">\n        {loaded ? (\n        <div className=\"row search-bar\">\n          <div className=\"col s12\">\n          <div className=\"card\">\n            <div className=\"card-content\">\n              <div className=\"card-title\">\n                Welcome to Dagger Browser\n              </div>\n              Dagger Browser is a simple tool for easily navigating a project's Dagger graph. The graph data is generated by a Dagger SPI plugin and supplied via a JSON manifest file.\n              <div className=\"center-align\">\n              <LoadManifestModal \n                onChangeManifestUrl={onChangeManifestUrl}\n                trigger={<a className=\"btn red lighten-2\" href=\"#\">Load manifest from URL</a>}/>\n              </div>\n            </div>\n          </div>            \n          </div>\n        </div>\n        ) : (\n        <div className=\"row\">\n          <div className=\"col s12 center-align\">         \n            <Spinner/>\n          </div>\n        </div>  \n        )}\n      </div>    \n    </div>\n  );\n};\n\nexport default GraphBrowserLoader;\n","import GraphManager from \"../models/GraphManager\";\nimport GraphReducer from \"../models/GraphReducer\";\nimport { Weight } from \"../models/Graph\";\nimport WeightService from \"./WeightService\";\n\nconst LARGE_THRESHOLD = 500;\nconst SMALL_THRESHOLD = 10;\n\n/** Service that computes the number of bindings for a given component and node. */\nexport default class BindingsService implements WeightService {\n\n  private nodeWeights: { [componentName: string]: { [key: string]: Weight } };\n  private graphManager: GraphManager;\n\n  constructor(graphManager: GraphManager) {\n    this.graphManager = graphManager;\n    this.nodeWeights = {};\n  }\n\n  getWeight(componentName: string, node?: string): Weight | undefined {\n    if (node) {\n      if (!this.nodeWeights[componentName]) {\n        this.nodeWeights[componentName] = {};\n      }\n      if (!this.nodeWeights[componentName][node]) {\n        this.nodeWeights[componentName][node] =\n            this.graphManager.computeNodeWeight(componentName, node, new GraphReducerImpl());\n      }\n      return this.nodeWeights[componentName][node];\n    } else {\n      return {\n        value: this.graphManager.getComponent(componentName).nodes.length,\n        largeThreshold: LARGE_THRESHOLD,\n        smallThreshold: SMALL_THRESHOLD\n      } as Weight;\n    }\n  }\n}\n\nclass GraphReducerImpl implements GraphReducer {\n  weight: Weight;\n\n  constructor() {\n    this.weight = {\n      value: 0,\n      largeThreshold: LARGE_THRESHOLD,\n      smallThreshold: SMALL_THRESHOLD\n    } as Weight;\n  }\n\n  reduce(key: string) {\n    this.weight.value++;\n  }\n\n  result(): Weight {\n    return this.weight;\n  }\n}\n","const METHOD_SIZE_BYTES = 60;\nconst FIELD_SIZE_BYTES = 30;\n\n/** Stores class information from ApkAnalyzer output. */\nexport type ClassInfo = {\n  method_count: number;\n  lambda_count?: number; // temporarily optional for backward compatibility\n  field_count: number;\n  code_size: number;\n  inner_class_count?: number; // temporarily optional for backward compatibility\n}\n\n/** Convenience class to output summary and memory based on class information. */\nexport default class ClassSize {\n  classInfo: ClassInfo;\n\n  constructor(classInfo: ClassInfo) {\n    this.classInfo = classInfo;\n  }\n\n  /** Returns the class info as a single string, useful for popups or title/alt attributes. */\n  getSummary(): string {\n    let codeSize = this.classInfo.code_size;\n    let unit = 'B';\n    if (codeSize >= 1024) {\n      codeSize = Math.round(codeSize / 1024);\n      unit = 'kB';\n    }\n    return `dex size: ${codeSize} ${unit}` +\n        `\\nmethods: ${this.classInfo.method_count}` +\n        (this.classInfo.lambda_count ? `\\nlambdas: ${this.classInfo.lambda_count}` : ``) +\n        `\\nfields: ${this.classInfo.field_count}` +\n        (this.classInfo.inner_class_count ? `\\ninner classes: ${this.classInfo.inner_class_count}` : ``);\n  }\n\n  /** Returns estimated memory size in bytes. */\n  getMemorySize(): number {\n    return this.classInfo.code_size + this.classInfo.method_count * METHOD_SIZE_BYTES + this.classInfo.field_count * FIELD_SIZE_BYTES;\n  }\n\n  add(classSize: ClassSize) {\n    this.classInfo.method_count += classSize.classInfo.method_count;\n    if (classSize.classInfo.lambda_count) {\n      const count = this.classInfo.lambda_count || 0;\n      this.classInfo.lambda_count = count + classSize.classInfo.lambda_count;\n    }\n    this.classInfo.field_count += classSize.classInfo.field_count;\n    this.classInfo.code_size += classSize.classInfo.code_size;\n    if (classSize.classInfo.inner_class_count) {\n      const count = this.classInfo.inner_class_count || 0;\n      this.classInfo.inner_class_count = count + classSize.classInfo.inner_class_count;\n    }\n  }\n}\n","import ClassSize, { ClassInfo } from \"../models/ClassSize\";\nimport { Weight } from \"../models/Graph\";\nimport WeightService from \"./WeightService\";\n\nconst LARGE_THRESHOLD_KB = 20; // Nodes over 10KB are considered \"large\"\nconst SMALL_THRESHOLD_KB = 3; // Nodes less than 3KB are considered \"small\"\n\n/**\n * Service to get class size for a given class name.\n */\nexport default class ClassSizeService implements WeightService {\n  /** Class information - method/field count and dex size - stored per fully qualified class name. */\n  classInfo: { [key: string]: ClassInfo };\n\n  constructor(classInfo: { [key: string]: ClassInfo }) {\n    this.classInfo = classInfo;\n  }\n\n  getWeight(componentName: string, node?: string): Weight | undefined {\n    const classSize = this.getClassSize(node ? node : componentName);\n    if (classSize) {\n      var memorySizeKb = classSize.getMemorySize() / 1024;\n      if (memorySizeKb > 1) {\n        memorySizeKb = Math.round(memorySizeKb);\n      }\n\n      return {\n        value: memorySizeKb,\n        largeThreshold: LARGE_THRESHOLD_KB,\n        smallThreshold: SMALL_THRESHOLD_KB,\n        summary: classSize.getSummary(),\n        unit: 'kB'\n      } as Weight;\n    }\n  }\n\n  getClassSize(className: string): ClassSize | undefined {\n    const info = this.classInfo[className];\n    if (info) {\n      return new ClassSize(info);\n    }\n  }\n}\n","import ClassSize, { ClassInfo } from \"../models/ClassSize\";\nimport GraphManager from \"../models/GraphManager\";\nimport GraphReducer from \"../models/GraphReducer\";\nimport { Weight } from \"../models/Graph\";\nimport ClassSizeService  from \"./ClassSizeService\";\nimport WeightService from \"./WeightService\";\n\nconst LARGE_THRESHOLD_KB = 1000; // Nodes over 1MB are considered \"large\"\nconst SMALL_THRESHOLD_KB = 50; // Nodes less than 50KB are considered \"small\"\n\n/**\n * Service to compute the graph weight in terms of memory.\n * This is based on transitive dependencies per node and on the methods, fields, and dex code size.\n */\nexport default class GraphSizeService implements WeightService {\n\n  private nodeWeights: { [componentName: string]: { [key: string]: Weight } };\n  private graphManager: GraphManager;\n  private classSizeService: ClassSizeService;\n\n  constructor(graphManager: GraphManager, classSizeService: ClassSizeService) {\n    this.graphManager = graphManager;\n    this.classSizeService = classSizeService;\n    this.nodeWeights = {};\n  }\n\n  getWeight(componentName: string, node?: string): Weight | undefined {\n    if (!this.nodeWeights[componentName]) {\n      this.nodeWeights[componentName] = {};\n    }\n\n    if (node) {\n      if (!this.nodeWeights[componentName][node]) {\n        const graphReducer = new GraphReducerImpl(this.classSizeService, node);\n        this.nodeWeights[componentName][node] =\n            this.graphManager.computeNodeWeight(componentName, node, graphReducer);\n      }\n      return this.nodeWeights[componentName][node];\n    } else {\n      if (!this.nodeWeights[componentName][componentName]) {\n        const nodes = Object.assign([], this.graphManager.getComponent(componentName).nodes);\n        const graphReducer = new GraphReducerImpl(this.classSizeService, componentName);\n        this.nodeWeights[componentName][componentName] =\n            this.graphManager.computeWeightForNodes(componentName, nodes, graphReducer);\n      }\n      return this.nodeWeights[componentName][componentName];\n    }\n  }\n}\n\nclass GraphReducerImpl implements GraphReducer {\n  private classSize: ClassSize;\n  private classSizeService: ClassSizeService;\n\n  /**\n   * Tracks nodes that have already been reduced. This is necessary to count Dagger modules\n   * just once. They may be a common dependency and counted multiple times.\n   */\n  private reduced: Set<string>;\n\n  constructor(classSizeService: ClassSizeService, initialKey: string) {\n    this.classSizeService = classSizeService;\n    this.reduced = new Set();\n\n    const classInfo = {\n      'field_count': 0,\n      'method_count': 0,\n      'lambda_count': 0,\n      'code_size': 0,\n      'inner_class_count': 0\n    } as ClassInfo;\n    this.classSize = new ClassSize(classInfo);\n    const parentClassSize = this.classSizeService.getClassSize(initialKey);\n    if (parentClassSize) {\n      this.classSize.add(parentClassSize);\n    }\n  }\n\n  reduce(key: string) {\n    if (this.reduced.has(key)) {\n      return;\n    }\n\n    this.reduced.add(key);\n    const childClassSize = this.classSizeService.getClassSize(key);\n    if (childClassSize) {\n      this.classSize.add(childClassSize);\n    }\n  }\n\n  result(): Weight {\n    return {\n      value: Math.round(this.classSize.getMemorySize() / 1024),\n      largeThreshold: LARGE_THRESHOLD_KB,\n      smallThreshold: SMALL_THRESHOLD_KB,\n      summary: this.classSize.getSummary(),\n      unit: 'kB'\n    } as Weight;\n  }\n}\n","import GraphManager from \"../models/GraphManager\";\nimport BindingsService from \"./BindingsService\";\nimport ClassSizeService from \"./ClassSizeService\";\nimport GraphSizeService from \"./GraphSizeService\";\nimport WeightService from \"./WeightService\";\n\n/** Manages currently selected weight service. */\nexport default class WeightServiceManager {\n\n  private weightServices: { [key: string]: WeightService };\n  private weightService: WeightService;\n\n  constructor(graphManager: GraphManager) {\n    // Add bindings count as the default service.\n    this.weightServices = {};\n    this.weightService = this.weightServices['bindings'] = new BindingsService(graphManager);\n\n    // TODO: Separate services into a config file.\n    if (graphManager.classInfo && Object.keys(graphManager.classInfo).length) { \n      const classSizeService = new ClassSizeService(graphManager.classInfo);\n      this.weightServices['class memory'] = classSizeService;\n      this.weightServices['graph memory'] = new GraphSizeService(graphManager, classSizeService);\n    }\n  }\n\n  getWeightServiceNames(): Array<string> {\n    return Object.keys(this.weightServices).sort();\n  }\n\n  getWeightService(): WeightService {\n    return this.weightService;\n  }\n\n  selectWeightService(weight: string) {\n    this.weightService = this.weightServices[weight];\n  }\n}","import { Link } from \"react-router-dom\";\nimport Config from \"../models/Config\";\nimport Routes from \"../Routes\";\nimport { LoadManifestModal } from \"./LoadManifestModal\";\nimport React, { useRef } from \"react\";\nimport {Navbar, Icon, NavItem, Dropdown, Divider, Modal, Button} from \"react-materialize\";\n\nexport interface Props {\n  manifestUrl?: string;\n  onChangeManifestUrl: (url: string) => void\n}\n\nexport function BrowserHeader({ manifestUrl, onChangeManifestUrl }: Props) {\n  return (\n    <nav>\n      <div className=\"container\">\n        <div className=\"nav-wrapper\">\n          <Link to={Routes.Home} className=\"brand-logo\">\n            {Config.TITLE}\n          </Link>\n          {manifestUrl && (\n          <div className=\"right hide-on-med-and-down\">\n            <Dropdown\n            options={{\n              alignment: 'right',\n              autoTrigger: true,\n              closeOnClick: true,\n              constrainWidth: false,\n              container: null,\n              coverTrigger: false,\n              hover: false,\n              inDuration: 150,\n              onCloseEnd: null,\n              onCloseStart: null,\n              onOpenEnd: null,\n              onOpenStart: null,\n              outDuration: 250\n            }}\n            trigger={<a href=\"#!\" className=\"settings-icon\"><Icon right>settings</Icon></a>}\n          >\n            <LoadManifestModal onChangeManifestUrl={onChangeManifestUrl} trigger={<a href=\"#\" className=\"manifest-model\">Load manifest from URL</a>} />\n            <a href={manifestUrl}\n              target=\"_blank\"\n              className=\"manifest-model\"\n              title=\"Download JSON\">\n              Download manifest\n            </a>\n          </Dropdown>\n          </div>\n          )}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React, { useCallback, FunctionComponent } from 'react'\nimport { useDropzone } from 'react-dropzone'\n\n\ntype Props = {\n    manifestUrl?: string;\n    onFilesSelected: (files: File[]) => void\n}\n\nconst FileDropzone: FunctionComponent<Props> = ({ manifestUrl, onFilesSelected, children }) => {\n    const onDrop = useCallback(onFilesSelected, [])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()}>\n            {\n                isDragActive ?\n                    (<div>\n                        {children}\n                        <div className=\"full-screen-alert\">\n                            <p>Drop to load manifest...</p>\n                        </div>\n                    </div>\n                    ) :\n\n                    children\n            }\n        </div>\n    )\n}\n\nexport default FileDropzone","import React from \"react\"\nimport DaggerBrowser from \"./components/GraphBrowser\";\nimport GraphBrowserLoader from \"./components/GraphBrowserLoader\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport GraphManager from \"./models/GraphManager\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport { Paths } from \"./Routes\";\nimport WeightServiceManager from \"./service/WeightServiceManager\";\nimport { BrowserHeader } from \"./components/BrowserHeader\";\nimport FileDropzone from \"./components/FileDropzone\";\nimport Config from \"./models/Config\";\n\ninterface AppState {\n  manifestUrl?: string;\n  manifestFile?: File\n  loadedManifest: boolean;\n  weightServiceManager?: WeightServiceManager\n}\n\nclass App extends React.Component<any, AppState> {\n  private graphManager = new GraphManager();\n  \n  constructor(props: any) {\n    super(props);\n    this.state = {\n      manifestUrl: Config.COMPONENTS_MANIFEST_JSON_URL,\n      loadedManifest: false\n    };\n  }\n\n  componentDidMount() {\n    this.refresh()\n  }\n\n  componentDidUpdate() {\n    this.refresh()\n  }\n\n  async refresh() {\n    if (!this.state.loadedManifest) {\n      if (this.state.manifestFile) {\n        const success = await this.graphManager.loadFile(this.state.manifestFile);\n        this.setState({\n          weightServiceManager: success ? new WeightServiceManager(this.graphManager) : undefined,\n          loadedManifest: true\n        }) \n      } else if (this.state.manifestUrl) {\n        const success = await this.graphManager.loadUrl(this.state.manifestUrl);\n        this.setState({\n          weightServiceManager: success ? new WeightServiceManager(this.graphManager) : undefined,\n          loadedManifest: true\n        })      \n      }\n    }\n  }\n\n  private onChangeManifestUrl(url: string) {\n    this.setState({\n      manifestUrl: url,\n      loadedManifest: false\n    })\n  }\n\n  private onChangeManifestFile(acceptedFiles: File[]) {\n    if (acceptedFiles.length !== 1) {\n      alert(\"Upload a single ComponentsManifest.json\")\n      return\n    }\n\n    const file = acceptedFiles[0]\n    if (file.type != \"application/json\") {\n      alert(\"Manifest must be a json file\")\n      return\n    }\n\n    this.setState({\n      manifestFile: file,\n      loadedManifest: false\n    })\n  }\n\n  render() {\n    return <HashRouter>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <Route  \n          path={Paths.Home}\n          render={props => (\n              <FileDropzone onFilesSelected={(files) => this.onChangeManifestFile(files)}>\n                <div>\n                  <BrowserHeader manifestUrl={this.graphManager.manifestUrl} onChangeManifestUrl={(url) => this.onChangeManifestUrl(url)} />\n                  {this.state.weightServiceManager ? (\n                    <DaggerBrowser\n                      componentName={props.match.params.component ? decodeURIComponent(props.match.params.component) : \"\"}\n                      graphManager={this.graphManager}\n                      weightServiceManager={this.state.weightServiceManager}\n                    />\n                  ) : (\n                      <GraphBrowserLoader loaded={this.state.loadedManifest} onChangeManifestUrl={(url) => this.onChangeManifestUrl(url)} />\n                    )}\n                </div>\n            </FileDropzone>\n          )}\n        />\n      </QueryParamProvider>\n    </HashRouter>;\n  }\n}\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport'bootstrap-css-only/css/bootstrap.min.css';\nimport'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","module.exports = __webpack_public_path__ + \"static/media/link.757c2f47.png\";"],"sourceRoot":""}